{ 
	"name": "Red",
	"scopeName": "source.red",
	"fileTypes": ["reds", "red"],

	"firstLineMatch": "^\\s*(Red|Red/System)\\s\\[",
	"foldingStartMarker": "^([^;]*[\\[\\{\\(])+\\s*(\\;.*)?$",
	"foldingStopMarker": "^\\s*[\\]\\}\\)].*$",

	"patterns": [
  		{"include": "#comments"},
  		{"include": "#type-literal"},
  		{"include": "#strings"},
  		{"include": "#values"},
  		{"include": "#words"}	
	],

	"repository": {

		"binary-base-sixtyfour": {
			"name": "binary.base64.red",
			"begin": "64#\\{",
			"beginCaptures": {
				"0": { "name": "string.binary.prefix" }
			},
			"patterns": [
				{
					"name": "string.binary.base64.red",
					"match": "[0-9a-zA-Z+/=\\s]*"
				},
				{
					"name": "invalid.illegal.red",
					"match": "."
				}
			],
			"end": "\\}",
			"endCaptures": {
				"0": { "name": "string.binary.prefix" }
			}
		},

		"binary-base-sixteen":  {
  			"name": "binary.base16.red",
			"begin": "(16)?#\\{",
			"beginCaptures": {
				"0": { "name": "string.binary.prefix" }
			},
			"patterns": [			
				{	
					"name": "string.binary.base16.red",
					"match": "[0-9a-fA-F]{2,2}"
				},
				{
					"name": "invalid.illegal.red",
					"match": "."
				}
			],
			"end": "\\}",
			"endCaptures": {
				"0": { "name": "string.binary.prefix" }
			}
		},

		"binary-base-two": {
			"name": "binary.base2.red",
			"begin": "2#\\{",
			"beginCaptures": {
				"0": { "name": "string.binary.prefix" }
			},
			"patterns": [			
				{
					"name": "string.binary.base2.red",
					"match": "([01]\\s*){8}"
				},
				{
					"name": "invalid.illegal.red",
					"match": "."
				}
			],
			"end": "\\}",
			"endCaptures": {
				"0": { "name": "string.binary.prefix" }
			}
		},

  		"character": {
			"name": "string.character.red",
			"match": "#\"(\\^(\\(([0-9a-fA-F]+|del)\\)|.)|[^\\^\\\"])\""
		},

		"character-html": {
			"name": "constant.character.entity.html",
			"match": "(&)([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+)(;)",
			"captures": {
				"0": { "name": "punctuation.definition.entity.html" },
				"2": { "name": "punctuation.definition.entity.html" }
			}
		},

		"character-inline": {
			"name": "string.escaped.red",
			"match": "\\^(\\(([0-9a-fA-F]+|del)\\)|.)"
		},

		"comment-docline": {
			"name": "comment.docline.red",
			"match": ";-.*?(?=\\%>|$)"
		},

		"comment-todo": {
			"name": "comment.todo.red",
			"match": ";@@.*?(?=\\%>|$)"
		},

		"comment-line": {
			"name": "comment.line.red",
			"match": ";.*?(?=\\%>|$)"
		},
		
		"comment-multiline-block": {
			"name": "comment.multiline.red",
			"begin": "comment\\s*\\[",
			"end": "\\]",
			"patterns": [
				{"include": "#comment-multiline-block-string" },
				{"include": "#comment-multiline-string-nested" },
				{"include": "#comment-multiline-block-nested" }
			]
		},

		"comment-multiline-block-string": {
			"name": "comment.multiline.red",
			"begin": "\"",
			"patterns": [
				{ "match": "\\^."}
			],
			"end": "\""
		},

		"comment-multiline-block-nested": {
			"name" : "comment.multiline.red",
			"begin": "\\[",
			"end"  : "\\]",
			"patterns": [
				{"include": "#comment-multiline-block-string" },
				{"include": "#comment-multiline-string-nested" },
				{"include": "#comment-multiline-block-nested" }
			]
		},
		
		"comment-multiline-string": {
			"name": "comment.multiline.red",
			"begin": "comment\\s*\\{",
			"end": "\\}",
			"patterns": [
			{ "match": "\\^."},
				{"include": "#comment-multiline-string-nested" }
			]
		},

		"comment-multiline-string-nested": {
			"name" : "comment.multiline.red",
			"begin": "\\{",
			"end"  : "\\}",
			"patterns": [
				{ "match": "\\^."},
				{"include": "#comment-multiline-string-nested" }
			]
		},

		"comments": {
			"patterns": [
				{ "include": "#comment-docline" },
				{ "include": "#comment-todo" },
				{ "include": "#comment-line" },
				{ "include": "#comment-multiline-string" },
				{ "include": "#comment-multiline-block" }
			]
		},

		"singlequotedString": {
			"name": "string.quoted.single.xml",
			"begin": "'",
			"end": "'"
		},

		"doublequotedString": {
			"name": "string.quoted.double.xml",
			"begin": "\"",
			"end": "\""
		},

		"rsp-tag": {
			"begin": "<%=",
			"end": "%>",
			"name": "source.red",
			"patterns": [
				{ "include": "source.red" }
			]
		},

		"string-email": {
			"name": "string.email.red",
			"match": "[^\\s\\n:/\\[\\]\\(\\)]+@[^\\s\\n:/\\[\\]\\(\\)]+"
		},

		"string-file": {
			"name": "string.file.red",
			"match": "%[^\\s\\n\\[\\]\\(\\)]+"
		},

		"string-file-quoted": {
			"name": "string.file.quoted.red",
			"begin": "%\"",
			"beginCaptures": {
				"0": { "name": "string.file.quoted.red" }
			},
			"patterns": [
				{
					"name": "string.escape.ssraw",
					"match": "%[A-Fa-f0-9]{2}"
				}
			],
			"end": "\"",
			"endCaptures": {
				"0": { "name": "string.file.quoted.red" }
			}
		},

		"string-issue": {
			"name": "string.issue.red",
			"match": "#[^\\s\\n\\[\\]\\(\\)\\/]*"
		},

		"string-multiline": {
			"name": "string.multiline.red",
			"begin": "\\{",
			"end": "\\}",
			"patterns": [
				{ "include": "#rsp-tag" },
				{ "include": "#character-inline" },
				{ "include": "#character-html" },
				{ "include": "#string-nested-multiline" }
			]
		},

		"string-nested-multiline": {
			"name": "string.multiline.red",
			"begin": "\\{",
			"end": "\\}",
			"patterns": [
				{ "include": "#string-nested-multiline" }
			]
		},

		"string-quoted": {
			"name": "string.red",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{ "include": "#rsp-tag" },
				{ "include": "#character-inline" },
				{ "include": "#character-html" }
			]
		},

		"string-tag": {
			"name": "entity.tag.red",
			"begin": "<(?:\\/|%\\=?\\ )?(?:([-_a-zA-Z0-9]+):)?([-_a-zA-Z0-9:]+)",
			"beginCaptures": {
				"0": { "name": "entity.other.namespace.xml" },
				"1": { "name": "entity.name.tag.xml" }
			},
			"end": "(?:\\s/|\\ %)?>",
			"patterns": [
				{
					"match": " (?:([-_a-zA-Z0-9]+):)?([_a-zA-Z-]+)",
					"captures": {
					 	"0": { "name": "entity.other.namespace.xml" },
					 	"1": { "name": "entity.other.attribute-name.xml" }
					}
				},
				{ "include": "#singlequotedString" },
				{ "include": "#doublequotedString" }
			]
		},

		"string-url": {
			"name": "string.url.red",
			"match": "[A-Za-z][\\w]{1,9}:(/{0,3}[^\\s\\n\\[\\]\\(\\)]+|//)"
		},

		"strings": {
			"patterns": [
				{ "include": "#character" },
				{ "include": "#string-quoted" },
				{ "include": "#string-multiline" },
				{ "include": "#string-tag" },
				{ "include": "#string-file-quoted" },
				{ "include": "#string-file" },
				{ "include": "#string-url" },
				{ "include": "#string-email" },
				{ "include": "#binary-base-two" },
				{ "include": "#binary-base-sixtyfour" },
				{ "include": "#binary-base-sixteen" },
				{ "include": "#string-issue" }
			]
		},

		"type-literal": {
			"name": "series.literal.red",
			"begin": "#\\[(?:(\\w+!)|(true|false|none))",
			"beginCaptures": {
				"0": {"name": "native.datatype.red"},
				"1": {"name": "logic.red"}
			},
			"end": "]",
			"patterns": [
				{ "include": "$self" }
			]
		},

		"value-date": {
			"name": "date.red",
			"match": "\\d{1,2}\\-([A-Za-z]{3}|January|Febuary|March|April|May|June|July|August|September|October|November|December)\\-\\d{4}(/\\d{1,2}[:]\\d{1,2}([:]\\d{1,2}(\\.\\d{1,5})?)?([+-]\\d{1,2}[:]\\d{1,2})?)?",
			"captures": {
				"1": {"name": "time.red"}
			}
		},

		"value-money": {
			"name": "number.money.red",
			"match": "(?<!\\w)-?[a-zA-Z]*\\$\\d+(\\.\\d*)?"
		},

		"value-number": {
			"name": "constant.numeric.red",
			"match": "(?<!\\w|\\.)([-+]?((\\d+\\.?\\d*)|(\\.\\d+))((e|E)(\\+|-)?\\d+)?)(?=\\W)"
		},

		"value-number-hex": {
			"name": "number.red",
			"match": "(?<=^|\\s|\\[|\\]|\\)|\\()([0-9A-F]+)h(?=\\s|\\)|\\]|/|;|\\\"|{\\[|\\()",
			"captures": {
				"1": {"name": "constant.numeric.red"}
			}
		},

		"value-pair": {
			"name": "constant.pair.red",
			"match": "(?<!\\w)[-+]?[[:digit:]]+[x][[:digit:]]+"
		},

		"value-time": {
			"name": "time.red",
			"match": "([-+]?[:]\\d{1,2}([aApP][mM])?)|([-+]?[:]\\d{1,2}[.]\\d{0,9})|([-+]?\\d{1,2}[:]\\d{1,2}([aApP][mM])?)|([-+]?\\d{1,2}[:]\\d{1,2}[.]\\d{0,9})|([-+]?\\d{1,2}[:]\\d{1,2}[:]\\d{1,2}([.]\\d{0,9})?([aApP][mM])?)(?!\\w)"
		},

		"value-tuple": {
			"name": "tuple.red",
			"match": "([[:digit:]]{0,3}[.][[:digit:]]{0,3}[.][[:digit:]]{0,3}([.][[:digit:]]{0,3}){0,7})"
		},

		"values": {
			"patterns": [
				{ "include": "#value-tuple" },
				{ "include": "#value-number" },
				{ "include": "#value-pair" },
				{ "include": "#value-money" },
				{ "include": "#value-number-hex" },
				{ "include": "#value-date" },
				{ "include": "#value-time" }
			]
		},

		"word-refinement": {
			"name": "keyword.refinement.red",
			"match": "/[^\\s\\n\\[\\]\\(\\)]*"
		},
		
		"word-operator": {
			"name": "keyword.operator.comparison",
			"match": "(==|!=|<=|>=|<>|<|>|>>|>>>|<<|\\+|-|=|\\*|%|/|\\b(and|or|xor))(?=\\s|\\(|\\[|\\)|\\]|/|;|\\\"|{)"
		},

		"parens": {
			"name": "keyword.operator.comparison",
			"match": "(\\[|\\]|\\(|\\))"
		},

		"word-setword": {
			"name": "support.variable.setword.red",
			"match": "[^:\\s\\n\\[\\]\\(\\)]*:"
			//note: values like [ foo:boo ] are catched as valid url! in REBOL, so keeping this functionality there as well.
		},

		"word-getword": {
			"name": "support.variable.getword.red",
			"match": "(?<=^|\\s|\\[|\\]|\\)|\\():[A-Za-z_0-9=_\\-\\!\\?\\*\\+\\.~:']+(?=\\s|\\)|\\])"
		},

		"word-litword": {
			"name": "keyword.litword.red",
			"match": "(?<=^|\\s|\\[|\\]|\\)|\\()'[A-Za-z_0-9=_\\-\\!\\?\\*\\+\\.~:']+(?=\\s|\\)|\\])"
		},

		"word-datatype": {
			"name": "support.type.red",
			"match": "(?<=^|\\s|\\[|\\]|\\)|\\()([A-Za-z_0-9=_\\-\\?\\*\\+\\.~:']+\\!|as|to|as-float|as-integer|as-byte)(?=\\s|\\)|\\])"
		},
		
		"word-group1": {
			"name": "support.function.red",
			"match": "(?<=^|\\s|\\[|\\]|\\)|\\()(?i)(native|alias|all|any|as-string|as-binary|bind|bound\\?|case|catch|checksum|comment|debase|dehex|exclude|difference|disarm|enbase|form|free|get|get-env|in|intersect|minimum-of|maximum-of|mold|new-line|new-line\\?|not|now|prin|print|reduce|compose|construct|reverse|save|script\\?|set|shift|throw|to-hex|trace|try|type\\?|union|charset|unique|unprotect|unset|use|value\\?|compress|decompress|secure|open|close|read|read-io|write-io|write|update|query|wait|input\\?|exp|log-10|log-2|log-e|square-root|cosine|sine|tangent|arccosine|arcsine|arctangent|arctangent2|atan2|protect|lowercase|uppercase|entab|detab|connected\\?|browse|launch|stats|get-modes|set-modes|to-local-file|to-rebol-file|encloak|decloak|create-link|do-browser|bind\\?|hide|draw|show|size-text|textinfo|offset-to-caret|caret-to-offset|local-request-file|rgb-to-hsv|hsv-to-rgb|crypt-strength\\?|dh-make-key|dh-generate-key|dh-compute-key|dsa-make-key|dsa-generate-key|dsa-make-signature|dsa-verify-signature|rsa-make-key|rsa-generate-key|rsa-encrypt)(?=\\s|\\(|\\[|/|;|\\\"|{)"
		},

		"word-group2": {
			"name": "support.function.group2.red",
			"match": "(?<=^|\\s|\\[|\\]|\\)|\\()(?i)(if|either|unless|else|for|foreach|forall|remove-each|until|while|case|loop|repeat|switch)(?=\\s|\\(|\\[|/|;|\\\"|{)"
		},

		"word-group3": {
			"name": "keyword.series.red",
			"match": "(?<=^|\\s|\\[|\\]|\\)|\\()(?i)(at|insert|append|tail|head|back|repend|next)(?=\\s|\\(|\\[|\\)|\\]|/|;|\\\"|{)"
		},
		
		"word-group4": {
			"name": "logic.red",
			"match": "(?<=^|\\s|\\[|\\]|\\)|\\()(?i)(off|false|none|on|true|yes|no|null)(?=\\s|\\(|\\[|\\)|\\]|;|\\\"|{)"
		},

		"word-group5": {
			"name": "keyword.breaks.red",
			"match": "(?<=^|\\s|\\[|\\]|\\)|\\()(?i)(halt|quit|exit|return|break|quit)(?=\\s|\\(|\\[|/|;|\\\"|{)"
		},

		"word-reds-contexts": {
			"name": "entity.other.inherited-class.red",
			"match": "(?<=^|\\s|\\[|\\]|\\)|\\()(?i)(action|bitset|block|char|_context|datatype|file|function|get-path|get-word|integer|issue|lit-path|lit-word|logic|native|none|object|op|paren|path|point|refinement|routine|set-path|set-word|string|symbol|unset|url|word|interpreter|stack|words|float|binary|parser|unicode)(?=/)"
		},

		//WORD is defined here so numbers are not detected inside words like:  foo-2-boo
		"word": {
			"name": "word.red",
			"match": "(?<=^|\\s|\\[|\\]|\\)|\\()[A-Za-z_\\*\\?=_-]+[A-Za-z_0-9=_\\-\\!\\?\\*\\+\\.~:']*(?=\\s|\\)|\\]|/|;|\\\"|{)"
		},

		"function-definition-block": {
			"name": "function.definition.block",
			"begin": "\\[",
			"end": "]",
			"patterns": [
				{ "include": "#comments" },
				{ "include": "#word-datatype" }
			]
		},

		"function-definition": {
			"name": "function.definition",
			"begin": "([A-Za-z=\\!\\?\\*_\\+][A-Za-z0-9=_\\-\\!\\?\\*\\+\\.~']*):\\s+(?i)(function|func|funct|routine|has)\\s*(\\[)",
			"beginCaptures": {
				"1": {"name": "support.variable.function.red"},
				"2": {"name": "keyword.function"},
				"3": {"name": "support.strong"}
			},
			"end": "]",
			"endCaptures": {
				"0": {"name": "support.strong"}
			},
			"patterns": [
				{ "include": "#function-definition-block" },
				{ "include": "#comments" },
				{ "include": "#strings" },
				{ "include": "#word-setword" },
				{ "include": "#word-datatype" },
				{ "include": "#word-refinement" }
			]
		},

		"function-definition-does": {
			"name": "function.definition.does",
			"match": "([A-Za-z=\\!\\?\\*_\\+][A-Za-z0-9=_\\-\\!\\?\\*\\+\\.]*):\\s+(?i)(does|context)(?=\\s*|\\[)",
			"captures": {
				"1": {"name": "support.variable.function.red"},
				"2": {"name": "keyword.function"}
			}
		},
		
		"words": {
			"name": "word.red",
			"patterns": [
				{ "include": "#function-definition" },
				{ "include": "#function-definition-does"},
				{ "include": "#word-refinement" },
				{ "include": "#word-operator" },
				{ "include": "#word-getword" },
				{ "include": "#word-setword" },
				{ "include": "#word-refinement" },
				{ "include": "#word-datatype" },
				{ "include": "#word-group4" },
				{ "include": "#word-reds-contexts" },
				{ "include": "#word-group1" },
				{ "include": "#word-group2" },
				{ "include": "#word-group3" },
				{ "include": "#word-group5" },
				{ "include": "#word" }
			]
		}
  },
  
  "uuid": "d5b29cdd-d851-4c62-aee2-00cd24d5f158"
}