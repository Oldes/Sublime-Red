%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: Red
file_extensions:
  - reds
  - red
first_line_match: '^\s*(Red|Red/System)\s\['
scope: source.red
contexts:
  main:
    - include: comments
    - include: type-literal
    - include: strings
    - include: values
    - include: words
  binary-base-sixteen:
    - match: '(16)?#\{'
      captures:
        0: string.binary.prefix
      push:
        - meta_scope: binary.base16.red
        - match: '\}'
          captures:
            0: string.binary.prefix
          pop: true
        - match: ';.*$'
          scope: comment.line.red
        - match: '[0-9a-fA-F\s]*'
          scope: string.binary.base16.red
        - match: .
          scope: invalid.illegal.red
  binary-base-sixtyfour:
    - match: '64#\{'
      captures:
        0: string.binary.prefix
      push:
        - meta_scope: binary.base64.red
        - match: '\}'
          captures:
            0: string.binary.prefix
          pop: true
        - match: ';.*$'
          scope: comment.line.red
        - match: '[0-9a-zA-Z+/=\s]*'
          scope: string.binary.base64.red
        - match: .
          scope: invalid.illegal.red
  binary-base-two:
    - match: '2#\{'
      captures:
        0: string.binary.prefix
      push:
        - meta_scope: binary.base2.red
        - match: '\}'
          captures:
            0: string.binary.prefix
          pop: true
        - match: ';.*$'
          scope: comment.line.red
        - match: '[01\s]*'
          scope: string.binary.base2.red
        - match: .
          scope: invalid.illegal.red
  character:
    - match: '#"(\^(\(([0-9a-fA-F]+|del)\)|.)|[^\^\"])"'
      scope: string.character.red
  character-html:
    - match: "(&)([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+)(;)"
      scope: constant.character.entity.html
      captures:
        0: punctuation.definition.entity.html
        2: punctuation.definition.entity.html
  character-inline:
    - match: '\^(\(([0-9a-fA-F]+|del)\)|.)'
      scope: string.escaped.red
  comment-docline:
    - match: ;-.*?(?=\%>|$)
      scope: comment.docline.red
  comment-line:
    - match: ;.*?(?=\%>|$)
      scope: comment.line.red
  comment-multiline-block:
    - match: 'comment\s*\['
      push:
        - meta_scope: comment.multiline.red
        - match: '\]'
          pop: true
        - include: comment-multiline-block-string
        - include: comment-multiline-string-nested
        - include: comment-multiline-block-nested
  comment-multiline-block-nested:
    - match: '\['
      push:
        - meta_scope: comment.multiline.red
        - match: '\]'
          pop: true
        - include: comment-multiline-block-string
        - include: comment-multiline-string-nested
        - include: comment-multiline-block-nested
  comment-multiline-block-string:
    - match: '"'
      push:
        - meta_scope: comment.multiline.red
        - match: '"'
          pop: true
        - match: \^.
  comment-multiline-string:
    - match: 'comment\s*\{'
      push:
        - meta_scope: comment.multiline.red
        - match: '\}'
          pop: true
        - match: \^.
        - include: comment-multiline-string-nested
  comment-multiline-string-nested:
    - match: '\{'
      push:
        - meta_scope: comment.multiline.red
        - match: '\}'
          pop: true
        - match: \^.
        - include: comment-multiline-string-nested
  comment-todo:
    - match: ;@@.*?(?=\%>|$)
      scope: comment.todo.red
  comments:
    - include: comment-docline
    - include: comment-todo
    - include: comment-line
    - include: comment-multiline-string
    - include: comment-multiline-block
  doublequotedString:
    - match: '"'
      push:
        - meta_scope: string.quoted.double.xml
        - match: '"'
          pop: true
  function-definition:
    - match: '([A-Za-z=\!\?\*_\+][A-Za-z0-9=_\-\!\?\*\+\.~'']*):\s+(?i)(function|func|funct|routine|has)\s*(\[)'
      captures:
        1: support.variable.function.red
        2: keyword.function
        3: support.strong
      push:
        - meta_scope: function.definition
        - match: "]"
          captures:
            0: support.strong
          pop: true
        - include: function-definition-block
        - include: comments
        - include: strings
        - include: word-setword
        - include: word-datatype
        - include: word-refinement
  function-definition-block:
    - match: '\['
      push:
        - meta_scope: function.definition.block
        - match: "]"
          pop: true
        - include: comments
        - include: word-datatype
  function-definition-does:
    - match: '([A-Za-z=\!\?\*_\+][A-Za-z0-9=_\-\!\?\*\+\.]*):\s+(?i)(does|context)(?=\s*|\[)'
      scope: function.definition.does
      captures:
        1: support.variable.function.red
        2: keyword.function
  parens:
    - match: '(\[|\]|\(|\))'
      scope: keyword.operator.comparison
  rsp-tag:
    - match: <%=
      push:
        - meta_scope: source.red
        - match: "%>"
          pop: true
        - include: scope:source.red
  singlequotedString:
    - match: "'"
      push:
        - meta_scope: string.quoted.single.xml
        - match: "'"
          pop: true
  string-email:
    - match: '[^\s\n:/\[\]\(\)]+@[^\s\n:/\[\]\(\)]+'
      scope: string.email.red
  string-file:
    - match: '%[^\s\n\[\]\(\)]+'
      scope: string.file.red
  string-file-quoted:
    - match: '%"'
      captures:
        0: string.file.quoted.red
      push:
        - meta_scope: string.file.quoted.red
        - match: '"'
          captures:
            0: string.file.quoted.red
          pop: true
        - match: "%[A-Fa-f0-9]{2}"
          scope: string.escape.ssraw
  string-issue:
    - match: '#[^\s\n\[\]\(\)\/]*'
      scope: string.issue.red
  string-multiline:
    - match: '\{'
      push:
        - meta_scope: string.multiline.red
        - match: '\}'
          pop: true
        - include: rsp-tag
        - include: character-inline
        - include: character-html
        - include: string-nested-multiline
  string-nested-multiline:
    - match: '\{'
      push:
        - meta_scope: string.multiline.red
        - match: '\}'
          pop: true
        - include: string-nested-multiline
  string-quoted:
    - match: '"'
      push:
        - meta_scope: string.red
        - match: '"'
          pop: true
        - include: rsp-tag
        - include: character-inline
        - include: character-html
  string-tag:
    - match: '<(?:\/|%\=?\ )?(?:([-_a-zA-Z0-9]+):)?([-_a-zA-Z0-9:]+)'
      captures:
        0: entity.other.namespace.xml
        1: entity.name.tag.xml
      push:
        - meta_scope: entity.tag.red
        - match: (?:\s/|\ %)?>
          pop: true
        - match: " (?:([-_a-zA-Z0-9]+):)?([_a-zA-Z-]+)"
          captures:
            0: entity.other.namespace.xml
            1: entity.other.attribute-name.xml
        - include: singlequotedString
        - include: doublequotedString
  string-url:
    - match: '[A-Za-z][\w]{1,9}:(/{0,3}[^\s\n\[\]\(\)]+|//)'
      scope: string.url.red
  strings:
    - include: character
    - include: string-quoted
    - include: string-multiline
    - include: string-tag
    - include: string-file-quoted
    - include: string-file
    - include: string-url
    - include: string-email
    - include: binary-base-two
    - include: binary-base-sixtyfour
    - include: binary-base-sixteen
    - include: string-issue
  type-literal:
    - match: '#\[(?:(\w+!)|(true|false|none))'
      captures:
        0: native.datatype.red
        1: logic.red
      push:
        - meta_scope: series.literal.red
        - match: "]"
          pop: true
        - include: main
  value-date:
    - match: '\d{1,2}\-([A-Za-z]{3}|January|Febuary|March|April|May|June|July|August|September|October|November|December)\-\d{4}(/\d{1,2}[:]\d{1,2}([:]\d{1,2}(\.\d{1,5})?)?([+-]\d{1,2}[:]\d{1,2})?)?'
      scope: date.red
      captures:
        1: time.red
  value-money:
    - match: '(?<!\w)-?[a-zA-Z]*\$\d+(\.\d*)?'
      scope: number.money.red
  value-number:
    - match: '(?<!\w|\.)([-+]?((\d+\.?\d*)|(\.\d+))((e|E)(\+|-)?\d+)?)(?=\W|$)'
      scope: constant.numeric.red
  value-number-hex:
    - match: '(?<=^|\s|\[|\]|\)|\()([0-9A-F]+)h(?=\s|\)|\]|/|;|\"|{\[|\(|$)'
      scope: number.red
      captures:
        1: constant.numeric.red
  value-pair:
    - match: '(?<!\w)[-+]?[[:digit:]]+[x][[:digit:]]+'
      scope: constant.pair.red
  value-time:
    - match: '([-+]?[:]\d{1,2}([aApP][mM])?)|([-+]?[:]\d{1,2}[.]\d{0,9})|([-+]?\d{1,2}[:]\d{1,2}([aApP][mM])?)|([-+]?\d{1,2}[:]\d{1,2}[.]\d{0,9})|([-+]?\d{1,2}[:]\d{1,2}[:]\d{1,2}([.]\d{0,9})?([aApP][mM])?)(?!\w)'
      scope: time.red
  value-tuple:
    - match: "([[:digit:]]{0,3}[.][[:digit:]]{0,3}[.][[:digit:]]{0,3}([.][[:digit:]]{0,3}){0,7})"
      scope: tuple.red
  values:
    - include: value-tuple
    - include: value-number
    - include: value-pair
    - include: value-money
    - include: value-number-hex
    - include: value-date
    - include: value-time
  word:
    - match: '(?<=^|\s|\[|\]|\)|\()[A-Za-z_\*\?=_-]+[A-Za-z_0-9=_\-\!\?\*\+\.~:'']*(?=\s|\)|\]|/|;|\"|{|$)'
      scope: word.red
  word-datatype:
    - match: '(?<=^|\s|\[|\]|\)|\()([A-Za-z_0-9=_\-\?\*\+\.~:'']+\!|as|to|as-float|as-integer|as-byte)(?=\s|\)|\]|$)'
      scope: support.type.red
  word-getword:
    - match: '(?<=^|\s|\[|\]|\)|\():[A-Za-z_0-9=_\-\!\?\*\+\.~:'']+(?=\s|\)|\]|$)'
      scope: support.variable.getword.red
  word-group1:
    - match: '(?<=^|\s|\[|\]|\)|\()(?i)(native|alias|all|any|as-string|as-binary|bind|bound\?|case|catch|checksum|comment|debase|dehex|exclude|difference|disarm|enbase|form|free|get|get-env|in|intersect|minimum-of|maximum-of|mold|new-line|new-line\?|not|now|prin|print|reduce|compose|construct|reverse|save|script\?|set|shift|throw|to-hex|trace|try|type\?|union|charset|unique|unprotect|unset|use|value\?|compress|decompress|secure|open|close|read|read-io|write-io|write|update|query|wait|input\?|exp|log-10|log-2|log-e|square-root|cosine|sine|tangent|arccosine|arcsine|arctangent|arctangent2|atan2|protect|lowercase|uppercase|entab|detab|connected\?|browse|launch|stats|get-modes|set-modes|to-local-file|to-rebol-file|encloak|decloak|create-link|do-browser|bind\?|hide|draw|show|size-text|textinfo|offset-to-caret|caret-to-offset|local-request-file|rgb-to-hsv|hsv-to-rgb|crypt-strength\?|dh-make-key|dh-generate-key|dh-compute-key|dsa-make-key|dsa-generate-key|dsa-make-signature|dsa-verify-signature|rsa-make-key|rsa-generate-key|rsa-encrypt)(?=\s|\(|\[|/|;|\"|{|$)'
      scope: support.function.red
  word-group2:
    - match: '(?<=^|\s|\[|\]|\)|\()(?i)(if|either|unless|else|for|foreach|forall|remove-each|until|while|case|loop|repeat|switch)(?=\s|\(|\[|/|;|\"|{|$)'
      scope: support.function.group2.red
  word-group3:
    - match: '(?<=^|\s|\[|\]|\)|\()(?i)(at|insert|append|tail|head|back|repend|next)(?=\s|\(|\[|\)|\]|/|;|\"|{|$)'
      scope: keyword.series.red
  word-group4:
    - match: '(?<=^|\s|\[|\]|\)|\()(?i)(off|false|none|on|true|yes|no|null)(?=\s|\(|\[|\)|\]|;|\"|{|$)'
      scope: logic.red
  word-group5:
    - match: '(?<=^|\s|\[|\]|\)|\()(?i)(halt|quit|exit|return|break|quit)(?=\s|\(|\[|/|;|\"|{|$)'
      scope: keyword.breaks.red
  word-litword:
    - match: '(?<=^|\s|\[|\]|\)|\()''[A-Za-z_0-9=_\-\!\?\*\+\.~:'']+(?=\s|\)|\]|$)'
      scope: keyword.litword.red
  word-operator:
    - match: '(==|!=|<=|>=|<>|<|>|>>|>>>|<<|\+|-|=|\*|%|/|\b(and|or|xor))(?=\s|\(|\[|\)|\]|/|;|\"|{|$)'
      scope: keyword.operator.comparison
  word-reds-contexts:
    - match: '(?<=^|\s|\[|\]|\)|\()(?i)(action|bitset|block|char|_context|datatype|file|function|get-path|get-word|integer|issue|lit-path|lit-word|logic|native|none|object|op|paren|path|point|refinement|routine|set-path|set-word|string|symbol|unset|url|word|interpreter|stack|words|float|binary|parser|unicode)(?=/)'
      scope: entity.other.inherited-class.red
  word-refinement:
    - match: '/[^\s\n\[\]\(\)]*'
      scope: keyword.refinement.red
  word-setword:
    - match: '[^:\s\n\[\]\(\)]*:'
      scope: support.variable.setword.red
  words:
    - include: function-definition
    - include: function-definition-does
    - include: word-refinement
    - include: word-operator
    - include: word-getword
    - include: word-setword
    - include: word-refinement
    - include: word-datatype
    - include: word-group4
    - include: word-reds-contexts
    - include: word-group1
    - include: word-group2
    - include: word-group3
    - include: word-group5
    - include: word
